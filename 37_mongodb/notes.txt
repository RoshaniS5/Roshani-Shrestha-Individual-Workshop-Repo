Roshani Shrestha
SoftDev
K37 -- Another DB Perspective
2022-05-03
time spent: 1.3 hours

Notes for Chapter 3 of MongoDB 101:

Inserting New Documents - ObjectId:
- using Atlas UI
    - "INSERT DOCUMENT" button: default view or JSON view, can change data types
- every document needs to have a unique _id value
- ObjectId()
    - default value for the _id field unless otherwise specified
- Add another field value pair and move from field to value to type using the Tab button (or use your mouse)

Inserting New Documents - insert() and errors:
- use --drop to remove collection before inserting it back to eliminate the duplicate key problem
- using the Mongo shell
    - use insert()
Steps taken in the video:
    1. Connect to Atlas cluster
    2. Navigate to the needed database
    3. Get a random document from a collection
        - use findOne()
    4. Copy the random document
    5. Insert it into the collection 
        - Is there a duplicate key error? There should be one
        - Doesn't insert
    6. Remove _id field and try again
        - Up arrow for previously issued command
        - Does it work? It should work, inserts
    7. Create find query to look for documents with the specific id and certificate number
        - Should all be the same except for _id

Inserting New Documents - insert() order:
- inserting multiple documents
    - put multiple documents into an array by surrounding them with square brackets
    - inserts documents in the order in which they are listed in the array
        - to change that: add an ordered option in the insert command with a value of false
- if you insert a document into a collection that doesn't exist, the collection gets created - same for databases
- when there is no data associated with a database, that database doesn't exist in the Atlas cluster

Updating Documents - Data Explorer:
- click edit button 
- can choose where to nest a new element

Updating Documents - mongo shell:
- updateOne()
    - db.<collection>.updateOne(query, {"$set": {"<field1>": <increment value>, ...}})
        - sets field value to a new specified value
- updateMany()
    - db.<collection>.updateMany(query, {"$inc": {"<field1>": <increment value>, ...}})
        - increments field value by a specified amount
- {"$push": {<field1>: <valuea>, ...}}
    - adds an element to an array field

Deleting Documents and Collections:
- through Data Explorer
    - garbage can
- in mongo shell
    - deleteOne()
        - good idea when querying by _id value 
    - deleteMany()
    - use drop for collections: db.<collection>.drop()